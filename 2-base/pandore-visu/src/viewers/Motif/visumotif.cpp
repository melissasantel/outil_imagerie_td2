/*
** Generated by WorkShop Visual
*/

extern void changePalette(Widget, XtPointer, XtPointer) ;
extern void afficheProperties(Widget, XtPointer, XtPointer) ;
extern void changeSlice(Widget, XtPointer, XtPointer) ;
extern void afficheImage(Widget, XtPointer, XtPointer) ;
extern void menuValeurs(Widget, XtPointer, XtPointer) ;
extern void menuHistogramme(Widget, XtPointer, XtPointer) ;
extern void menuProfil(Widget, XtPointer, XtPointer) ;
extern void menuLut(Widget, XtPointer, XtPointer) ;
extern void menuDynamic(Widget, XtPointer, XtPointer) ;
extern void menuZoom(Widget, XtPointer, XtPointer) ;
extern void menuSeuillage(Widget, XtPointer, XtPointer) ;
extern void menuProp(Widget, XtPointer, XtPointer) ;
extern void menuAnnuler(Widget, XtPointer, XtPointer) ;
extern void menuEffacer(Widget, XtPointer, XtPointer) ;
extern void sortie(Widget, XtPointer, XtPointer) ;
extern void afficheProfil(Widget, XtPointer, XtPointer) ;
extern void afficheValeurs(Widget, XtPointer, XtPointer) ;
extern void changeSeuilBas(Widget, XtPointer, XtPointer) ;
extern void changeSeuilHaut(Widget, XtPointer, XtPointer) ;
extern void changeLut(Widget, XtPointer, XtPointer) ;
extern void changeDynamic(Widget, XtPointer, XtPointer) ;
extern void afficheHistogramme(Widget, XtPointer, XtPointer) ;
extern void changeContrast(Widget, XtPointer, XtPointer) ;
extern void changeBrightness(Widget, XtPointer, XtPointer) ;

void XDmanage_link ( Widget, XtPointer client_data, XtPointer )
{
	if ( client_data && *(Widget *)client_data )
		XtManageChild ( *(Widget *)client_data );
}

void XDunmanage_link ( Widget, XtPointer client_data, XtPointer )
{
	if ( client_data && *(Widget *)client_data )
		XtUnmanageChild ( *(Widget *)client_data );
}

void XDpopup_link ( Widget, XtPointer client_data, XtPointer )
{
	if ( client_data && *(Widget *)client_data )
		XtPopup ( *(Widget *)client_data, XtGrabNone );
}

void XDpopdown_link ( Widget, XtPointer client_data, XtPointer )
{
	if ( client_data && *(Widget *)client_data )
		XtPopdown ( *(Widget *)client_data );
}

void XDmap_link ( Widget, XtPointer client_data, XtPointer )
{
	if ( client_data && *(Widget *)client_data )
		XtMapWidget (*(Widget *)client_data);
}

void XDunmap_link ( Widget, XtPointer client_data, XtPointer )
{
	if ( client_data && *(Widget *)client_data )
		XtUnmapWidget (*(Widget *)client_data);
}

void XDenable_link ( Widget, XtPointer client_data, XtPointer )
{
	if ( client_data && *(Widget *)client_data )
		XtSetSensitive (*(Widget *)client_data, TRUE);
}

void XDdisable_link ( Widget, XtPointer client_data, XtPointer )
{
	if ( client_data && *(Widget *)client_data )
		XtSetSensitive (*(Widget *)client_data, FALSE);
}


Widget sprops = (Widget) NULL;
Widget fprops = (Widget) NULL;
Widget cadre = (Widget) NULL;
Widget baseform = (Widget)NULL;
Widget slices = (Widget) NULL;
Widget hscrollbar = (Widget) NULL;
Widget vscrollbar = (Widget) NULL;
Widget tableau = (Widget) NULL;
Widget menu = (Widget) NULL;
Widget mvals = (Widget) NULL;
Widget mhisto = (Widget) NULL;
Widget mdynamic = (Widget) NULL;
Widget mprof = (Widget) NULL;
Widget mlig = (Widget) NULL;
Widget mcol = (Widget) NULL;
Widget x1 = (Widget) NULL;
Widget x2 = (Widget) NULL;
Widget x3 = (Widget) NULL;
Widget x4 = (Widget) NULL;
Widget x5 = (Widget) NULL;
Widget x6 = (Widget) NULL;
Widget x7 = (Widget) NULL;
Widget mseuil = (Widget) NULL;
Widget mprops = (Widget) NULL;
Widget mdrawing = (Widget) NULL;
Widget undo = (Widget) NULL;
Widget clear = (Widget) NULL;
Widget sprofil = (Widget) NULL;
Widget fprofil = (Widget) NULL;
Widget svaleurs = (Widget) NULL;
Widget fvaleurs = (Widget) NULL;
Widget sseuil = (Widget) NULL;
Widget fseuil = (Widget) NULL;
Widget fseuilb = (Widget) NULL;
Widget fseuilh = (Widget) NULL;
Widget slut = (Widget) NULL;
Widget flut = (Widget) NULL;
Widget sdynamic = (Widget) NULL;
Widget fdynamic = (Widget) NULL;
Widget fpalette = (Widget) NULL;
Widget shisto = (Widget) NULL;
Widget fhisto = (Widget) NULL;
Widget scontrast = (Widget) NULL;
Widget sbrightness = (Widget) NULL;
Widget lutbaseform=(Widget)NULL;
Widget dynamicbaseform=(Widget)NULL;

void create_sprops (Widget parent,
		    // The following arguments was edited by hand to set the desired depth.
		    int depth, Visual* visual, Colormap colormap)
{
	Widget children[1];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	Widget bulletin4 = (Widget)NULL;

	// The following lines was edited by hand to set the desired depth.
	/**/ XtSetArg(al[ac], XmNvisual,visual); ac++;
	/**/ XtSetArg(al[ac], XmNdepth,depth); ac++;
       	/**/ XtSetArg(al[ac], XmNcolormap,colormap); ac++;
	// End edited

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	XtSetArg(al[ac], XmNtitle, "Properties"); ac++;
	sprops = XmCreateDialogShell ( parent, "sprops", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNnoResize, TRUE); ac++;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	bulletin4 = XmCreateBulletinBoard ( sprops, "bulletin4", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNwidth, 300); ac++;
	XtSetArg(al[ac], XmNheight, 85); ac++;
	XtSetArg(al[ac], XmNmarginWidth, 1); ac++;
	XtSetArg(al[ac], XmNmarginHeight, 1); ac++;
	fprops = XmCreateDrawingArea ( bulletin4, "fprops", al, ac );

	ac = 0;
	XtAddCallback( fprops, XmNexposeCallback, afficheProperties, (XtPointer) 0 );
	children[ac++] = fprops;
	XtManageChildren(children, ac);
	ac = 0;
}


void create_menu (Widget parent,
		   int depth, Visual* visual, Colormap colormap)
{
	Widget children[13];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget label1 = (Widget)NULL;
	Widget separator1 = (Widget)NULL;
	Widget menu1 = (Widget)NULL;
	Widget button1 = (Widget)NULL;
	Widget cascade1 = (Widget)NULL;
	Widget menu2 = (Widget)NULL;
	Widget separator3 = (Widget)NULL;
	Widget menu3 = (Widget)NULL;
	Widget separator2 = (Widget)NULL;
	Widget button2 = (Widget)NULL;
	
	// The following lines was edited by hand to set the desired depth.
	/**/ XtSetArg(al[ac], XmNvisual,visual); ac++;
	/**/ XtSetArg(al[ac], XmNdepth,depth); ac++;
       	/**/ XtSetArg(al[ac], XmNcolormap,colormap); ac++;
	// End edited

 	menu = XmCreatePopupMenu ( parent, "menu", al, ac);
	xmstrings[0] = XmStringCreateLtoR ( "Pandore V4", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	label1 = XmCreateLabelGadget ( menu, "label1", al, ac );

	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	separator1 = XmCreateSeparator ( menu, "separator1", al, ac );
	xmstrings[0] = XmStringCreateLtoR ( "Values", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	mvals = XmCreatePushButtonGadget ( menu, "mvals", al, ac );

	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Histogram", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	mhisto = XmCreatePushButtonGadget ( menu, "mhisto", al, ac );

	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Profile", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;

	mprof = XmCreateCascadeButton ( menu, "mprof", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	menu1 = XmCreatePulldownMenu ( menu, "menu1", al, ac );
	xmstrings[0] = XmStringCreateLtoR ( "Row", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	mlig = XmCreatePushButtonGadget ( menu1, "mlig", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Column", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	mcol = XmCreatePushButtonGadget ( menu1, "mcol", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );

	xmstrings[0] = XmStringCreateLtoR ( "Lut", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	button1 = XmCreatePushButtonGadget ( menu, "button1", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );

	xmstrings[0] = XmStringCreateLtoR ( "Dynamic", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	mdynamic = XmCreatePushButtonGadget ( menu, "mdynamic", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );

	xmstrings[0] = XmStringCreateLtoR ( "Zoom", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	cascade1 = XmCreateCascadeButton ( menu, "cascade1", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );

	menu2 = XmCreatePulldownMenu ( menu, "menu2", al, ac );
	xmstrings[0] = XmStringCreateLtoR ( ": 4", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	x1 = XmCreatePushButtonGadget ( menu2, "x1", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( ": 3", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	x2 = XmCreatePushButtonGadget ( menu2, "x2", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( ": 2", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	x3 = XmCreatePushButtonGadget ( menu2, "x3", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "= 1", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	x4 = XmCreatePushButtonGadget ( menu2, "x1", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "x 2", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	x5 = XmCreatePushButtonGadget ( menu2, "x2", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "x 3", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	x6 = XmCreatePushButtonGadget ( menu2, "x3", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "x 4", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	x7 = XmCreatePushButtonGadget ( menu2, "x4", al, ac );

	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Thresholding", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	mseuil = XmCreatePushButtonGadget ( menu, "mseuil", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Properties", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	mprops = XmCreatePushButtonGadget ( menu, "mprops", al, ac );

	separator3 = XmCreateSeparator ( menu, "separator3", al, ac );
	xmstrings[0] = XmStringCreateLtoR ( "Drawing", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	mdrawing = XmCreateCascadeButton ( menu, "mdrawing", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	menu3 = XmCreatePulldownMenu ( menu, "menu3", al, ac );
	xmstrings[0] = XmStringCreateLtoR ( "Undo", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	undo = XmCreatePushButtonGadget ( menu3, "undo", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Clear", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	clear = XmCreatePushButtonGadget ( menu3, "clear", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	separator2 = XmCreateSeparator ( menu, "separator2", al, ac );
	xmstrings[0] = XmStringCreateLtoR ( "Quit", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	button2 = XmCreatePushButtonGadget ( menu, "button2", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtAddCallback( mvals, XmNactivateCallback, menuValeurs, (XtPointer) 0 );
	XtAddCallback( mhisto, XmNactivateCallback, menuHistogramme, (XtPointer) 0 );
	XtAddCallback( mlig, XmNactivateCallback, menuProfil, (XtPointer)0 );
	XtAddCallback( mcol, XmNactivateCallback, menuProfil, (XtPointer)1 );
	children[ac++] = mlig;
	children[ac++] = mcol;
	XtManageChildren(children, ac);
	ac = 0;
	XtSetArg(al[ac], XmNsubMenuId, menu1); ac++;
	XtSetValues ( mprof, al, ac );
	ac = 0;
	XtAddCallback( button1, XmNactivateCallback, menuLut, (XtPointer) 0 );
	XtAddCallback( mdynamic, XmNactivateCallback, menuDynamic, (XtPointer) 0 );
	XtAddCallback( x1, XmNactivateCallback, menuZoom, (XtPointer)-4);
	XtAddCallback( x2, XmNactivateCallback, menuZoom, (XtPointer)-3 );
	XtAddCallback( x3, XmNactivateCallback, menuZoom, (XtPointer)-2 );
	XtAddCallback( x4, XmNactivateCallback, menuZoom, (XtPointer)1 );
	XtAddCallback( x5, XmNactivateCallback, menuZoom, (XtPointer)2 );
	XtAddCallback( x6, XmNactivateCallback, menuZoom, (XtPointer)3 );
	XtAddCallback( x7, XmNactivateCallback, menuZoom, (XtPointer)4 );
	children[ac++] = x1;
	children[ac++] = x2;
	children[ac++] = x3;
	children[ac++] = x4;
	children[ac++] = x5;
	children[ac++] = x6;
	children[ac++] = x7;
	XtManageChildren(children, ac);
	ac = 0;
	XtSetArg(al[ac], XmNsubMenuId, menu2); ac++;
	XtSetValues ( cascade1, al, ac );
	ac = 0;
	XtAddCallback( mseuil, XmNactivateCallback, menuSeuillage, (XtPointer) 0 );
	XtAddCallback( mprops, XmNactivateCallback, menuProp, (XtPointer) 0 );
	XtAddCallback( undo, XmNactivateCallback, menuAnnuler, (XtPointer) 0 );
	XtAddCallback( clear, XmNactivateCallback, menuEffacer, (XtPointer) 0 );
	children[ac++] = undo;
	children[ac++] = clear;
	XtManageChildren(children, ac);
	ac = 0;
	XtSetArg(al[ac], XmNsubMenuId, menu3); ac++;
	XtSetValues ( mdrawing, al, ac );
 	ac = 0;
	XtAddCallback( button2, XmNactivateCallback, sortie, (XtPointer) 0 );
 	children[ac++] = label1;
 	children[ac++] = separator1;
	children[ac++] = mvals;
	children[ac++] = mhisto;
	children[ac++] = mprof;
	children[ac++] = button1;
	children[ac++] = mdynamic;
	children[ac++] = cascade1;
	children[ac++] = mseuil;
	children[ac++] = mprops;
	children[ac++] = separator3;
	children[ac++] = mdrawing;
	children[ac++] = separator2;
	children[ac++] = button2;
 	XtManageChildren(children, ac);
 	ac = 0;
}

void create_cadre (Display *display, char *app_name, int app_argc, char **app_argv, 
		   int depth, Visual* visual, Colormap colormap, Pixel bgcolor)
{
	Widget children[12];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	Widget scrolledWin2 = (Widget)NULL;

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;

	// The following lines was edited by hand to set the desired depth.
	/**/ XtSetArg(al[ac], XmNvisual,visual); ac++;
	/**/ XtSetArg(al[ac], XmNdepth,depth); ac++;
       	/**/ XtSetArg(al[ac], XmNcolormap,colormap); ac++;
	// End edited

	cadre = XtAppCreateShell ( app_name, "XApplication", applicationShellWidgetClass, display, al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	/**/	XtSetArg(al[ac], XmNbackground, bgcolor); ac++;
	baseform = XmCreateForm ( cadre, "baseform", al, ac );

	ac = 0;
	XtSetArg(al[ac], XmNx, 0); ac++;
	XtSetArg(al[ac], XmNy, 0); ac++;
	XtSetArg(al[ac], XmNshowValue, TRUE); ac++;
	/**/	XtSetArg(al[ac], XmNbackground, bgcolor); ac++;
	XtSetArg(al[ac], XmNorientation, XmHORIZONTAL); ac++;
	XtSetArg(al[ac], XmNscaleMultiple, 1); ac++;
	slices = XmCreateScale ( baseform, "slices", al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNx, 0); ac++;
	XtSetArg(al[ac], XmNy, 32); ac++;
	XtSetArg(al[ac], XmNscrollBarDisplayPolicy, XmAS_NEEDED); ac++;
	XtSetArg(al[ac], XmNscrollingPolicy, XmAUTOMATIC); ac++;
	scrolledWin2 = XmCreateScrolledWindow ( baseform, "scrolledWin2", al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNhorizontalScrollBar, &hscrollbar ); ac++;
	XtSetArg(al[ac], XmNverticalScrollBar, &vscrollbar ); ac++;
	XtGetValues(scrolledWin2, al, ac );
	
	ac = 0;
	XtSetArg(al[ac], XmNwidth, 500); ac++;
	XtSetArg(al[ac], XmNheight, 500); ac++;
	tableau = XmCreateDrawingArea ( scrolledWin2, "tableau", al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_OPPOSITE_FORM); ac++;
	XtSetArg(al[ac], XmNbottomOffset, -32); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( slices,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, slices); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftOffset, 0); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( scrolledWin2,al, ac );
	ac = 0;
	XtAddCallback( slices, XmNvalueChangedCallback, changeSlice, (XtPointer) 0 );
	XtAddCallback( tableau, XmNexposeCallback, afficheImage, (XtPointer) 0 );
	children[ac++] = tableau;
	XtManageChildren(children, ac);
	ac = 0;
	XmScrolledWindowSetAreas(scrolledWin2, hscrollbar, vscrollbar, tableau );
	children[ac++] = slices;
	children[ac++] = scrolledWin2;
	XtManageChildren(children, ac);
	ac = 0;
	XtManageChild (baseform);
}


void create_sprofil (Widget parent, int depth, Visual* visual, Colormap colormap) {
	Widget children[1];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	Widget bulletin1 = (Widget)NULL;

	// The following lines was edited by hand to set the desired depth.
	/**/ XtSetArg(al[ac], XmNvisual,visual); ac++;
	/**/ XtSetArg(al[ac], XmNdepth,depth); ac++;
       	/**/ XtSetArg(al[ac], XmNcolormap,colormap); ac++;
	// End edited


	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	sprofil = XmCreateDialogShell ( parent, "sprofil", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNnoResize, TRUE); ac++;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	bulletin1 = XmCreateBulletinBoard ( sprofil, "bulletin1", al, ac );
	ac = 0;
	fprofil = XmCreateDrawingArea ( bulletin1, "fprofil", al, ac );
	XtAddCallback( fprofil, XmNexposeCallback, afficheProfil, (XtPointer) 0 );
	children[ac++] = fprofil;
	XtManageChildren(children, ac);
	ac = 0;
}


void create_svaleurs (Widget parent) {
	Widget children[1];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	Widget bulletin2 = (Widget)NULL;

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	svaleurs = XmCreateDialogShell ( parent, "svaleurs", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNnoResize, TRUE); ac++;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	bulletin2 = XmCreateBulletinBoard ( svaleurs, "bulletin2", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNwidth, 610); ac++;
	XtSetArg(al[ac], XmNheight, 105); ac++;
	XtSetArg(al[ac], XmNmarginWidth, 1); ac++;
	XtSetArg(al[ac], XmNmarginHeight, 1); ac++;
	fvaleurs = XmCreateDrawingArea ( bulletin2, "fvaleurs", al, ac );
	ac = 0;
	XtAddCallback( fvaleurs, XmNexposeCallback, afficheValeurs, (XtPointer) 0 );
	children[ac++] = fvaleurs;
	XtManageChildren(children, ac);
	ac = 0;
}


void create_sseuil (Widget parent, int depth, Visual* visual, Colormap colormap) {
	Widget children[2];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */

	// The following lines was edited by hand to set the desired depth.
	/**/ XtSetArg(al[ac], XmNvisual,visual); ac++;
	/**/ XtSetArg(al[ac], XmNdepth,depth); ac++;
       	/**/ XtSetArg(al[ac], XmNcolormap,colormap); ac++;
	// End edited

	XtSetArg(al[ac], XmNwidth, 350); ac++;
	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	XtSetArg(al[ac], XmNtitle, "Thresholding"); ac++;
	sseuil = XmCreateDialogShell ( parent, "sseuil", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNnoResize, TRUE); ac++;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	fseuil = XmCreateBulletinBoard ( sseuil, "fseuil", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNx, 11); ac++;
	XtSetArg(al[ac], XmNy, 5); ac++;
	XtSetArg(al[ac], XmNwidth, 250); ac++;
	XtSetArg(al[ac], XmNshowValue, TRUE); ac++;
	XtSetArg(al[ac], XmNorientation, XmHORIZONTAL); ac++;
	fseuilb = XmCreateScale ( fseuil, "fseuilb", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNx, 10); ac++;
	XtSetArg(al[ac], XmNy, 50); ac++;
	XtSetArg(al[ac], XmNwidth, 250); ac++;
	XtSetArg(al[ac], XmNshowValue, TRUE); ac++;
	XtSetArg(al[ac], XmNorientation, XmHORIZONTAL); ac++;
	fseuilh = XmCreateScale ( fseuil, "fseuilh", al, ac );
	ac = 0;
	XtAddCallback( fseuilb, XmNvalueChangedCallback, changeSeuilBas, (XtPointer) 0 );
	XtAddCallback( fseuilh, XmNvalueChangedCallback, changeSeuilHaut, (XtPointer) 0 );
	children[ac++] = fseuilb;
	children[ac++] = fseuilh;
	XtManageChildren(children, ac);
	ac = 0;
}


void create_slut (Widget parent, int depth, Visual* visual, Colormap colormap) {
	Widget children[7];      /* Children to manage */
	Display *display = XtDisplay ( parent );
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XrmValue from_value, to_value; /* For resource conversion */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget toggle1 = (Widget)NULL;
	Widget toggle2 = (Widget)NULL;
	Widget toggle3 = (Widget)NULL;
	Widget toggle4 = (Widget)NULL;
	Widget toggle5 = (Widget)NULL;
	Widget toggle6 = (Widget)NULL;
	Widget toggle7 = (Widget)NULL;

// 	// The following lines was edited by hand to set the desired depth.
// 	/**/ XtSetArg(al[ac], XmNvisual,visual); ac++;
// 	/**/ XtSetArg(al[ac], XmNdepth,depth); ac++;
//        	/**/ XtSetArg(al[ac], XmNcolormap,colormap); ac++;
// 	// End edited

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	XtSetArg(al[ac], XmNtitle, "Colors"); ac++;
	slut = XmCreateDialogShell ( parent, "slut", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNnoResize, TRUE); ac++;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	lutbaseform = XmCreateForm ( slut, "lutbaseform", al, ac );

	ac = 0;
	XtSetArg(al[ac], XmNorientation, XmVERTICAL); ac++;
	flut = XmCreateRadioBox ( lutbaseform, "flut", al, ac );
	ac = 0;
	xmstrings[0] = XmStringCreateLtoR ( "Original", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(display)) != 1) {
	from_value.addr = "#ffff00000000";
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (flut, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNselectColor, *(unsigned int *)to_value.addr); ac++;
	}
	}
	XtSetArg(al[ac], XmNset, TRUE);ac++;

	toggle1 = XmCreateToggleButtonGadget ( flut, "toggle1", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Negatif", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(display)) != 1) {
	from_value.addr = "#ffff00000000";
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (flut, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
	{
		XtSetArg(al[ac], XmNselectColor, *(unsigned int *)to_value.addr); ac++;
	}
	}
	toggle2 = XmCreateToggleButtonGadget ( flut, "toggle2", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Color", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(display)) != 1) {
	from_value.addr = "#ffff00000000";
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (flut, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
	{
		XtSetArg(al[ac], XmNselectColor, *(unsigned int *)to_value.addr); ac++;
	}
	}
	toggle3 = XmCreateToggleButtonGadget ( flut, "toggle3", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Region", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(display)) != 1) {
	from_value.addr = "#ffff00000000";
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (flut, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
	{
		XtSetArg(al[ac], XmNselectColor, *(unsigned int *)to_value.addr); ac++;
	}
	}
	toggle4 = XmCreateToggleButtonGadget ( flut, "toggle4", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Random", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(display)) != 1) {
	from_value.addr = "#ffff00000000";
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (flut, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
	{
		XtSetArg(al[ac], XmNselectColor, *(unsigned int *)to_value.addr); ac++;
	}
	}
	toggle5 = XmCreateToggleButtonGadget ( flut, "toggle5", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Rainbow", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(display)) != 1) {
	from_value.addr = "#ffff00000000";
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (flut, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
	{
		XtSetArg(al[ac], XmNselectColor, *(unsigned int *)to_value.addr); ac++;
	}
	}
	toggle6 = XmCreateToggleButtonGadget ( flut, "toggle6", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Noise", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(display)) != 1) {
	from_value.addr = "#ffff00000000";
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (flut, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr )
	{
		XtSetArg(al[ac], XmNselectColor, *(unsigned int *)to_value.addr); ac++;
	}
	}
	toggle7 = XmCreateToggleButtonGadget ( flut, "toggle7", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Contrast", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNtitleString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNshowValue, TRUE); ac++;
	XtSetArg(al[ac], XmNminimum, -100); ac++;
	XtSetArg(al[ac], XmNmaximum, 100); ac++;
	XtSetArg(al[ac], XmNorientation, XmHORIZONTAL); ac++;
	scontrast = XmCreateScale ( lutbaseform, "scontrast", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "brightness", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNtitleString, xmstrings[0]); ac++;
	XtSetArg(al[ac], XmNshowValue, TRUE); ac++;
	XtSetArg(al[ac], XmNminimum, -100); ac++;
	XtSetArg(al[ac], XmNmaximum, 100); ac++;
	XtSetArg(al[ac], XmNorientation, XmHORIZONTAL); ac++;
	sbrightness = XmCreateScale ( lutbaseform, "sbrightness", al, ac );
	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	XtSetArg(al[ac], XmNwidth, 256); ac++;
	XtSetArg(al[ac], XmNheight, 20); ac++;
	XtSetArg(al[ac], XmNmarginWidth, 1); ac++;
	XtSetArg(al[ac], XmNmarginHeight, 1); ac++;
	fpalette = XmCreateDrawingArea ( lutbaseform, "fpalette", al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNtopOffset, -1); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftOffset, 0); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
	XtSetValues ( flut,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNtopOffset, 20); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftOffset, 105); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
	XtSetValues ( scontrast,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNtopOffset, 100); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftOffset, 105); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
	XtSetValues ( sbrightness,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNtopOffset, 188); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftOffset, -1); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
	XtSetValues ( fpalette,al, ac );
	ac = 0;
	XtAddCallback( toggle1, XmNarmCallback, changeLut, (XtPointer)0 );
	XtAddCallback( toggle2, XmNarmCallback, changeLut, (XtPointer)1 );
	XtAddCallback( toggle3, XmNarmCallback, changeLut, (XtPointer)2 );
	XtAddCallback( toggle4, XmNarmCallback, changeLut, (XtPointer)3 );
	XtAddCallback( toggle5, XmNarmCallback, changeLut, (XtPointer)4 );
	XtAddCallback( toggle6, XmNarmCallback, changeLut, (XtPointer)5 );
	XtAddCallback( toggle7, XmNarmCallback, changeLut, (XtPointer)6 );
	children[ac++] = toggle1;
	children[ac++] = toggle2;
	children[ac++] = toggle3;
	children[ac++] = toggle4;
	children[ac++] = toggle5;
	children[ac++] = toggle6;
	children[ac++] = toggle7;
	XtManageChildren(children, ac);
	ac = 0;
	XtAddCallback( scontrast, XmNvalueChangedCallback, changeContrast, (XtPointer) 0 );
	XtAddCallback( sbrightness, XmNvalueChangedCallback, changeBrightness, (XtPointer) 0 );
	XtAddCallback( fpalette, XmNexposeCallback, changePalette, (XtPointer) 0 );
	children[ac++] = flut;
	children[ac++] = scontrast;
	children[ac++] = sbrightness;
	children[ac++] = fpalette;
	XtManageChildren(children, ac);
	ac = 0;
}

void create_sdynamic (Widget parent, int depth, Visual* visual, Colormap colormap) {
	Widget children[2];      /* Children to manage */
	Display *display = XtDisplay ( parent );
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XrmValue from_value, to_value; /* For resource conversion */
	XmString xmstrings[16];    /* temporary storage for XmStrings */
	Widget toggle1 = (Widget)NULL;
	Widget toggle2 = (Widget)NULL;

// 	// The following lines was edited by hand to set the desired depth.
// 	/**/ XtSetArg(al[ac], XmNvisual,visual); ac++;
// 	/**/ XtSetArg(al[ac], XmNdepth,depth); ac++;
//        	/**/ XtSetArg(al[ac], XmNcolormap,colormap); ac++;
// 	// End edited

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	XtSetArg(al[ac], XmNtitle, "Colors dynamic"); ac++;
	sdynamic = XmCreateDialogShell ( parent, "sdynamic", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNnoResize, TRUE); ac++;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	dynamicbaseform = XmCreateForm ( sdynamic, "dynamicbaseform", al, ac );

	ac = 0;
	XtSetArg(al[ac], XmNorientation, XmVERTICAL); ac++;
	fdynamic = XmCreateRadioBox ( dynamicbaseform, "fdynamic", al, ac );

	ac = 0;
	xmstrings[0] = XmStringCreateLtoR ( "Contrast stretching", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(display)) != 1) {
	from_value.addr = "#ffff00000000";
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (fdynamic, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNselectColor, *(unsigned int *)to_value.addr); ac++;
	}
	}
	XtSetArg(al[ac], XmNset, TRUE);ac++;
	toggle1 = XmCreateToggleButtonGadget ( fdynamic, "toggle1", al, ac );

	ac = 0;
	XmStringFree ( xmstrings [ 0 ] );
	xmstrings[0] = XmStringCreateLtoR ( "Histogram equalization", (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
	XtSetArg(al[ac], XmNlabelString, xmstrings[0]); ac++;
	if (DefaultDepthOfScreen(DefaultScreenOfDisplay(display)) != 1) {
	from_value.addr = "#ffff00000000";
	from_value.size = strlen( from_value.addr ) + 1;
	to_value.addr = NULL;
	XtConvertAndStore (fdynamic, XmRString, &from_value, XmRPixel, &to_value);
	if ( to_value.addr ) {
		XtSetArg(al[ac], XmNselectColor, *(unsigned int *)to_value.addr); ac++;
	}
	}
	toggle2 = XmCreateToggleButtonGadget ( fdynamic, "toggle2", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNtopOffset, -1); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftOffset, 0); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_NONE); ac++;
	XtSetValues ( fdynamic,al, ac );
	ac = 0;

	XtAddCallback( toggle1, XmNarmCallback, changeDynamic, (XtPointer)0 );
	XtAddCallback( toggle2, XmNarmCallback, changeDynamic, (XtPointer)1 );
	children[ac++] = toggle1;
	children[ac++] = toggle2;
 	XtManageChildren(children, ac);
 	ac = 0;
 	children[ac++] = fdynamic;
 	XtManageChildren(children, ac);
	ac = 0;
}

void create_shisto (Widget parent, int depth, Visual* visual, Colormap colormap) {
	Widget children[1];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	Widget bulletin3 = (Widget)NULL;

	// The following lines was edited by hand to set the desired depth.
	/**/ XtSetArg(al[ac], XmNvisual,visual); ac++;
	/**/ XtSetArg(al[ac], XmNdepth,depth); ac++;
       	/**/ XtSetArg(al[ac], XmNcolormap,colormap); ac++;
	// End edited

	XtSetArg(al[ac], XmNallowShellResize, TRUE); ac++;
	XtSetArg(al[ac], XmNtitle, "Histogram"); ac++;
	shisto = XmCreateDialogShell ( parent, "shisto", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNnoResize, TRUE); ac++;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
	bulletin3 = XmCreateBulletinBoard ( shisto, "bulletin3", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNwidth, 320); ac++;
	XtSetArg(al[ac], XmNheight, 160); ac++;
	XtSetArg(al[ac], XmNmarginWidth, 1); ac++;
	XtSetArg(al[ac], XmNmarginHeight, 1); ac++;
	fhisto = XmCreateDrawingArea ( bulletin3, "fhisto", al, ac );
	ac = 0;
	XtAddCallback( fhisto, XmNexposeCallback, afficheHistogramme, (XtPointer) 0 );
	children[ac++] = fhisto;
	XtManageChildren(children, ac);
	ac = 0;
}

